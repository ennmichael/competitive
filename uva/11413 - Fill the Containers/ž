#include <iostream>
#include <vector>
#include <cstddef>
#include <iterator>
#include <numeric>
#include <cmath>

// This version doesn't work, but technically isn't too far off...

using Vessels = std::vector<long>;

struct Attempt {
    Vessels::const_iterator i;
    long left_sum;
    long right_sum;
    long difference;

    static Attempt left(Vessels::const_iterator i, Vessels::const_iterator end, long left_sum, long right_sum)
    {
        auto difference = std::abs(right_sum - left_sum);

        while (i != end)
        {
            left_sum -= *i;
            right_sum += *i;

            auto const new_difference = std::abs(right_sum - left_sum);
            if (new_difference > difference)
            {
                left_sum += *i;
                right_sum -= *i;
                break;
            }
            difference = new_difference;
            --i;
        }

        return Attempt { i, left_sum, right_sum, difference };
    };

    static Attempt right(Vessels::const_iterator i, Vessels::const_iterator end, long left_sum, long right_sum)
    {
        auto difference = std::abs(right_sum - left_sum);

        while (i != end)
        {
            left_sum += *i;
            right_sum -= *i;

            auto const new_difference = std::abs(right_sum - left_sum);
            if (new_difference > difference)
            {
                left_sum -= *i;
                right_sum += *i;
                break;
            }
            difference = new_difference;
            ++i;
        }

        return Attempt { i, left_sum, right_sum, difference };
    };
};

long solve(Vessels::const_iterator begin, Vessels::const_iterator end, long num_containers)
{
    if (num_containers == 1)
    {
        return std::accumulate(begin, end, 0);
    }

    auto i = begin + std::distance(begin, end) / 2;
    auto const left_sum = std::accumulate(begin, i, 0);
    auto const right_sum = std::accumulate(i, end, 0);

    auto const left_attempt = Attempt::left(i, begin - 1, left_sum, right_sum);
    auto const right_attempt = Attempt::right(i, end, left_sum, right_sum);
    auto const& attempt = (left_attempt.difference < right_attempt.difference) ? left_attempt : right_attempt;

    if (num_containers == 2)
    {
        return std::max(attempt.left_sum, attempt.right_sum);
    }

    if (num_containers % 2 == 0)
    {
        return std::max(
            solve(begin, attempt.i, num_containers / 2),
            solve(attempt.i, end, num_containers / 2)
        );
    }

    if (attempt.left_sum > attempt.right_sum)
    {
        return std::max(
            solve(begin, attempt.i, num_containers / 2 + 1),
            solve(attempt.i, end, num_containers / 2)
        );
    }
    else
    {
        return std::max(
            solve(begin, attempt.i, num_containers / 2),
            solve(attempt.i, end, num_containers / 2 + 1)
        );
    }
}

int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    while (true)
    {
        std::size_t num_vessels;
        long num_containers;
        std::cin >> num_vessels >> num_containers;

        if (std::cin.eof())
        {
            break;
        }

        Vessels vessels(num_vessels);
        for (auto& vessel : vessels)
        {
            std::cin >> vessel;
        }

        std::cout << solve(vessels.cbegin(), vessels.cend(), num_containers) << '\n';
    }
}
